/*
 * Copyright(c) Live2D Inc. All rights reserved.
 * 
 * Use of this source code is governed by the Live2D Open Software license
 * that can be found at http://live2d.com/eula/live2d-open-software-license-agreement_en.html.
 */

/* {{{autogeneratedwarning}}} */


using System;
using System.Runtime.InteropServices;


namespace Live2D.Cubism.Core.Unmanaged
{
    /// <summary>
    /// Unmanaged drawables interface.
    /// </sumamry>
    public sealed class CubismUnmanagedDrawables
    {
        {{#drawables}}
        {{#props}}
        /// <summary>
        /// {{{propdoc}}}
        /// </summary>>
        public {{{propcstype}}} {{{Propname}}} { get; private set; }
        
        {{/props}}
        
        {{#funcs}}
        /// <summary>
        /// {{{funcdoc}}}
        /// </summary>
        public {{{funccsreturntype}}} {{{Funcname}}}()
        {
            {{{funccsentry}}}(ModelPtr);
        }

        {{/funcs}}
        {{#hasfuncs}}

        /// <summary>
        /// Native model pointer.
        /// </summary>
        private IntPtr ModelPtr {get; set;}

        {{/hasfuncs}}

        #region Ctors

        /// <summary>
        /// Initializes instance.
        /// </summary>
        internal unsafe CubismUnmanagedDrawables(IntPtr modelPtr)
        {
            {{#hasfuncs}}
            ModelPtr = modelPtr;


            {{/hasfuncs}}
            {{#hasarrayprop}}
            var length = 0;
            {{/hasarrayprop}}
            {{#hasarray2prop}}
            CubismUnmanagedIntArrayView length2;
            {{/hasarray2prop}}


            {{#scalarprops}}
            {{{Propname}}} = {{{propget}}}(modelPtr);
            {{/scalarprops}}

            {{#stringarrayprops}}

            length = {{{propgetlength}}}(modelPtr);
            {{{Propname}}} = new string[length];
            var _{{{propname}}} = (IntPtr *)({{{propget}}}(modelPtr));
            for (var i = 0; i < length; ++i)
            {
                {{{Propname}}}[i] = Marshal.PtrToStringAnsi(_{{{propname}}}[i]);
            }
            {{/stringarrayprops}}

            {{#scalararrayprops}}

            length = {{{propgetlength}}}(modelPtr);
            {{{Propname}}} = new {{{propcstype}}}({{{propget}}}(modelPtr), length{{{proplengthfactor}}});
            {{/scalararrayprops}}

            {{#scalararray2props}}

            length = {{{propgetlength}}}(modelPtr);
            length2 = new CubismUnmanagedIntArrayView({{{propgetlength2}}}(modelPtr), length{{{proplengthfactor}}});
            {{{Propname}}} = new {{{propcstype1d}}}[length];
            var _{{{propname}}} = (IntPtr *)({{{propget}}}(modelPtr));
            for (var i = 0; i < length; ++i)
            {
                {{{Propname}}}[i] = new {{{propcstype1d}}}(_{{{propname}}}[i], length2[i]{{{proplength2factor}}});
            }
            {{/scalararray2props}}
        }

        #endregion
        {{/drawables}}
    }
}
